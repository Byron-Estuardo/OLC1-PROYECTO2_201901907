/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,36],$V2=[1,43],$V3=[1,37],$V4=[1,38],$V5=[1,39],$V6=[1,40],$V7=[1,41],$V8=[1,42],$V9=[1,26],$Va=[1,44],$Vb=[1,45],$Vc=[1,46],$Vd=[1,47],$Ve=[1,48],$Vf=[1,24],$Vg=[1,31],$Vh=[1,35],$Vi=[1,29],$Vj=[1,28],$Vk=[1,30],$Vl=[1,27],$Vm=[1,25],$Vn=[1,32],$Vo=[1,34],$Vp=[1,33],$Vq=[5,25,26,30,31,32,33,34,35,37,43,44,45,46,47,48,49,52,53,54,55,57,59,61,63,67,71,72,73],$Vr=[1,54],$Vs=[1,76],$Vt=[1,69],$Vu=[1,77],$Vv=[1,78],$Vw=[1,79],$Vx=[1,80],$Vy=[1,81],$Vz=[1,82],$VA=[1,66],$VB=[1,68],$VC=[1,67],$VD=[1,70],$VE=[1,71],$VF=[1,72],$VG=[1,73],$VH=[1,74],$VI=[1,75],$VJ=[28,37],$VK=[1,93],$VL=[1,94],$VM=[1,114],$VN=[1,115],$VO=[1,116],$VP=[1,117],$VQ=[1,118],$VR=[1,119],$VS=[1,120],$VT=[1,121],$VU=[1,122],$VV=[1,123],$VW=[1,124],$VX=[1,125],$VY=[1,126],$VZ=[1,127],$V_=[1,128],$V$=[28,29,60,65,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88],$V01=[5,25,26,30,31,32,33,34,35,37,43,44,45,46,47,48,49,52,53,54,55,57,59,61,63,67,71,72,73,76,89,90,91,92,93,94,95],$V11=[1,163],$V21=[28,65],$V31=[28,29,60,65,74,87,88],$V41=[1,211],$V51=[28,29,60,65,74,75,76,81,82,83,84,85,86,87,88],$V61=[28,29,60,65,74,75,76,77,78,80,81,82,83,84,85,86,87,88],$V71=[28,29,60,65,74,81,82,83,84,85,86,87,88],$V81=[1,279],$V91=[25,26,30,31,32,33,34,35,37,43,44,45,46,47,48,49,52,53,54,55,57,63,67,71,72,73],$Va1=[1,311],$Vb1=[52,59,61];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"OPCIONESCUERPO":4,"EOF":5,"CUERPO":6,"DEC_VAR":7,"IMPRIMIR":8,"DEC_MET":9,"AS_VAR":10,"EXEC":11,"RSIF":12,"WHILE":13,"SWITCHCASE":14,"INDEC":15,"INSFOR":16,"BREA":17,"RETU":18,"CONTINU":19,"DOWHILE":20,"LLAMADA_METODO":21,"FUNCIONESNATIVAS":22,"CAST":23,"FUNC":24,"lower":25,"parA":26,"EXPRESION":27,"parC":28,"ptcoma":29,"upper":30,"Rtostring":31,"Rtypeof":32,"Rround":33,"Rtruncate":34,"Rlength":35,"TIPO":36,"identificador":37,"incremento":38,"decremento":39,"INDEC1":40,"igual":41,"AS_VAR1":42,"Rentero":43,"Rdoble":44,"Rcadena":45,"Rcarater":46,"Rbooleano":47,"Rprint":48,"Rfor":49,"ACTU":50,"llaveA":51,"llaveC":52,"Rdoo":53,"Rwhile":54,"Rif":55,"Relse":56,"Rswitch":57,"LISTACASOS":58,"Rdefault":59,"dospts":60,"Rcase":61,"CASOS_EVALUAR":62,"Rexec":63,"LISTAVALORES":64,"coma":65,"LISTAPARAMETROS":66,"Rvoid":67,"OPCIONESMETODO":68,"PARAMETROS":69,"CUERPOMETODO":70,"Rbreak":71,"Rcontinue":72,"Rreturn":73,"Rternario":74,"mass":75,"menoss":76,"porr":77,"divv":78,"pott":79,"modd":80,"dif":81,"igualii":82,"menorr":83,"menorii":84,"mayorr":85,"mayorii":86,"orr":87,"andd":88,"nott":89,"enteroo":90,"decimall":91,"caracterr":92,"Rtrue":93,"Rfalse":94,"cadenaa":95,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",25:"lower",26:"parA",28:"parC",29:"ptcoma",30:"upper",31:"Rtostring",32:"Rtypeof",33:"Rround",34:"Rtruncate",35:"Rlength",37:"identificador",38:"incremento",39:"decremento",41:"igual",43:"Rentero",44:"Rdoble",45:"Rcadena",46:"Rcarater",47:"Rbooleano",48:"Rprint",49:"Rfor",51:"llaveA",52:"llaveC",53:"Rdoo",54:"Rwhile",55:"Rif",56:"Relse",57:"Rswitch",59:"Rdefault",60:"dospts",61:"Rcase",63:"Rexec",65:"coma",67:"Rvoid",71:"Rbreak",72:"Rcontinue",73:"Rreturn",74:"Rternario",75:"mass",76:"menoss",77:"porr",78:"divv",79:"pott",80:"modd",81:"dif",82:"igualii",83:"menorr",84:"menorii",85:"mayorr",86:"mayorii",87:"orr",88:"andd",89:"nott",90:"enteroo",91:"decimall",92:"caracterr",93:"Rtrue",94:"Rfalse",95:"cadenaa"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[22,5],[22,5],[22,5],[22,5],[22,5],[22,5],[22,5],[23,5],[15,3],[15,3],[40,2],[40,2],[10,4],[42,3],[7,3],[7,5],[36,1],[36,1],[36,1],[36,1],[36,1],[8,5],[8,4],[16,10],[16,10],[16,9],[16,9],[50,1],[50,1],[20,9],[20,8],[12,7],[12,9],[12,11],[12,6],[12,8],[12,9],[14,7],[14,10],[58,4],[58,3],[62,1],[62,2],[13,7],[13,6],[11,5],[11,6],[64,3],[64,1],[21,4],[21,5],[24,7],[24,8],[9,7],[9,8],[66,3],[66,1],[69,2],[68,2],[68,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[17,2],[19,2],[18,2],[18,3],[27,3],[27,4],[27,5],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,2],[27,2],[27,3],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,4],[27,4],[27,4],[27,4],[27,4],[27,4],[27,4],[27,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 console.log(JSON.stringify($$[$0-1],null,2)); return $$[$0-1]; 
break;
case 2: case 81:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 82:
 this.$ = [$$[$0]]; 
break;
case 4: case 65:
 this.$ = $$[$0]; 
break;
case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 50: case 51: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 91: case 92: case 93: case 94: case 95: case 96: case 97: case 98: case 99: case 100:
 this.$ = $$[$0] 
break;
case 23:
 this.$ = INSTRUCCION.nuevoFNat( $$[$0-2], TIPO_OPERACION.LOWER, this._$.first_line,this._$.first_column+1 ); 
break;
case 24:
 this.$ = INSTRUCCION.nuevoFNat( $$[$0-2], TIPO_OPERACION.UPPER, this._$.first_line,this._$.first_column+1 ); 
break;
case 25:
 this.$ = INSTRUCCION.nuevoFNat( $$[$0-2], TIPO_OPERACION.TSTRING, this._$.first_line,this._$.first_column+1 ); 
break;
case 26:
 this.$ = INSTRUCCION.nuevoFNat( $$[$0-2], TIPO_OPERACION.TYPEOF, this._$.first_line,this._$.first_column+1 ); 
break;
case 27:
 this.$ = INSTRUCCION.nuevoFNat( $$[$0-2], TIPO_OPERACION.ROUND, this._$.first_line,this._$.first_column+1 ); 
break;
case 28:
 this.$ = INSTRUCCION.nuevoFNat( $$[$0-2], TIPO_OPERACION.TRUNCATE, this._$.first_line,this._$.first_column+1 ); 
break;
case 29:
 this.$ = INSTRUCCION.nuevoFNat( $$[$0-2], TIPO_OPERACION.LENGTH, this._$.first_line,this._$.first_column+1 ); 
break;
case 30:
 this.$ = INSTRUCCION.nuevoCasteo($$[$0-2], TIPO_OPERACION.CASTEO, $$[$0-3] ,this._$.first_line,this._$.first_column+1 ); 
break;
case 31:
 this.$ = INSTRUCCION.nuevoIncremento($$[$0-2], this._$.first_line,this._$.first_column+1); 
break;
case 32:
 this.$ = INSTRUCCION.nuevoDecremento($$[$0-2], this._$.first_line,this._$.first_column+1); 
break;
case 33:
 this.$ = INSTRUCCION.nuevoIncremento($$[$0-1], this._$.first_line,this._$.first_column+1); 
break;
case 34:
 this.$ = INSTRUCCION.nuevoDecremento($$[$0-1], this._$.first_line,this._$.first_column+1); 
break;
case 35:
 this.$ = INSTRUCCION.nuevaAsignacion($$[$0-3], $$[$0-1], this._$.first_line,this._$.first_column+1); 
break;
case 36:
 this.$ = INSTRUCCION.nuevaAsignacion($$[$0-2], $$[$0], this._$.first_line,this._$.first_column+1); 
break;
case 37:
 this.$ = INSTRUCCION.nuevaDeclaracion($$[$0-1], null, $$[$0-2], this._$.first_line,this._$.first_column+1); 
break;
case 38:
 this.$ = INSTRUCCION.nuevaDeclaracion($$[$0-3], $$[$0-1], $$[$0-4], this._$.first_line,this._$.first_column+1); 
break;
case 39:
 this.$ = TIPO_DATO.ENTERO 
break;
case 40:
 this.$ = TIPO_DATO.DECIMAL 
break;
case 41:
 this.$ = TIPO_DATO.CADENA 
break;
case 42:
 this.$ = TIPO_DATO.CARACTER 
break;
case 43:
 this.$ = TIPO_DATO.BANDERA 
break;
case 44:
 this.$ = new INSTRUCCION.nuevoPrint($$[$0-2], this._$.first_line,this._$.first_column+1); 
break;
case 45:
 this.$ = new INSTRUCCION.nuevoPrint(null, this._$.first_line,this._$.first_column+1); 
break;
case 46: case 47:
 this.$ = INSTRUCCION.nuevofor($$[$0-7], $$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1); 
break;
case 48: case 49:
 this.$ = INSTRUCCION.nuevofor($$[$0-6], $$[$0-5], $$[$0-3], null, this._$.first_line,this._$.first_column+1); 
break;
case 52:
 this.$ = INSTRUCCION.nuevoDoWhile($$[$0-6], $$[$0-2], this._$.first_line,this._$.first_column+1); 
break;
case 53:
 this.$ = INSTRUCCION.nuevoDoWhile(null, $$[$0-1], this._$.first_line,this._$.first_column+1); 
break;
case 54:
 this.$ = new INSTRUCCION.nuevoIf($$[$0-4], $$[$0-1], null, this._$.first_line,this._$.first_column+1); 
break;
case 55:
 this.$ = new INSTRUCCION.nuevoIf($$[$0-6], $$[$0-3], Array($$[$0]), this._$.first_line,this._$.first_column+1); 
break;
case 56:
 this.$ = new INSTRUCCION.nuevoIf($$[$0-8], $$[$0-5], $$[$0-1], this._$.first_line,this._$.first_column+1); 
break;
case 57:
 this.$ = new INSTRUCCION.nuevoIf($$[$0-3], null, null, this._$.first_line,this._$.first_column+1); 
break;
case 58:
 this.$ = new INSTRUCCION.nuevoIf($$[$0-5], null, Array($$[$01]), this._$.first_line,this._$.first_column+1); 
break;
case 59:
 this.$ = new INSTRUCCION.nuevoIf($$[$0-6], null, null, this._$.first_line,this._$.first_column+1); 
break;
case 60:
 this.$ = INSTRUCCION.nuevoSwitch($$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1);
break;
case 61:
 this.$ = INSTRUCCION.nuevoSwitch($$[$0-7], $$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1);
break;
case 62:
 this.$ = $$[$0-3]; this.$.push(INSTRUCCION.nuevoCaso($$[$0-1], $$[$0], this._$.first_line,this._$.first_column+1)); 
break;
case 63:
 this.$ = []; this.$.push(INSTRUCCION.nuevoCaso($$[$0-1], $$[$0], this._$.first_line,this._$.first_column+1)); 
break;
case 64:
 this.$ = []; 
break;
case 66:
 this.$ = new INSTRUCCION.nuevoWhile($$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1); 
break;
case 67:
 this.$ = new INSTRUCCION.nuevoWhile($$[$0-3], null, this._$.first_line,this._$.first_column+1); 
break;
case 68:
 this.$ = INSTRUCCION.nuevoExec($$[$0-3], null, this._$.first_line,this._$.first_column+1); 
break;
case 69:
 this.$ = INSTRUCCION.nuevoExec($$[$0-4], $$[$0-2], this._$.first_line,this._$.first_column+1); 
break;
case 70:
$$[$0-2].push($$[$0]); this.$=$$[$0-2]
break;
case 71:
this.$=[$$[$0]]
break;
case 72:
 this.$ = INSTRUCCION.nuevaLlamada($$[$0-3], null, this._$.first_line,this._$.first_column+1); 
break;
case 73:
 this.$ = INSTRUCCION.nuevaLlamada($$[$0-4], $$[$0-2], this._$.first_line,this._$.first_column+1); 
break;
case 74:
this.$ = INSTRUCCION.nuevaFuncion($$[$0-6], $$[$0-5], null, $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 75:
this.$ = INSTRUCCION.nuevaFuncion($$[$0-7], $$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 76:
this.$ = INSTRUCCION.nuevoMetodo($$[$0-5], null, $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 77:
this.$ = INSTRUCCION.nuevoMetodo($$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 78:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 79:
this.$=[$$[$0]];
break;
case 80:
this.$ = INSTRUCCION.nuevaDeclaracion($$[$0], null, $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 101:
 this.$ = INSTRUCCION.nuevoBreak(this._$.first_line,this._$.first_column+1); 
break;
case 102:
 this.$ = INSTRUCCION.nuevoContinue(this._$.first_line,this._$.first_column+1); 
break;
case 103:
 this.$ = INSTRUCCION.nuevoReturn(null, this._$.first_line,this._$.first_column+1); 
break;
case 104:
 this.$ = INSTRUCCION.nuevoReturn($$[$0-1], this._$.first_line,this._$.first_column+1); 
break;
case 105:
 this.$ = INSTRUCCION.nuevaLlamada($$[$0-2], null, this._$.first_line,this._$.first_column+1); 
break;
case 106:
 this.$ = INSTRUCCION.nuevaLlamada($$[$0-3], $$[$0-1], this._$.first_line,this._$.first_column+1); 
break;
case 107:
 this.$ = INSTRUCCION.nuevoTernario(TIPO_OPERACION.TERNARIO, $$[$0-4], $$[$0-2], $$[$0],this._$.first_line,this._$.first_column+1); 
break;
case 108:
 this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.SUMA,this._$.first_line,this._$.first_column+1); 
break;
case 109:
 this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.RESTA,this._$.first_line,this._$.first_column+1); 
break;
case 110:
 this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MULTIPLICACION,this._$.first_line,this._$.first_column+1); 
break;
case 111:
 this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.DIVISION,this._$.first_line,this._$.first_column+1); 
break;
case 112:
 this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.POTENCIA,this._$.first_line,this._$.first_column+1); 
break;
case 113:
 this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MODULO,this._$.first_line,this._$.first_column+1); 
break;
case 114:
 this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.DIFERENTE,this._$.first_line,this._$.first_column+1); 
break;
case 115:
 this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.IGUALIGUAL,this._$.first_line,this._$.first_column+1); 
break;
case 116:
 this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MENOR,this._$.first_line,this._$.first_column+1); 
break;
case 117:
 this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MENORIGUAL,this._$.first_line,this._$.first_column+1); 
break;
case 118:
 this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MAYOR,this._$.first_line,this._$.first_column+1); 
break;
case 119:
 this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MAYORIGUAL,this._$.first_line,this._$.first_column+1); 
break;
case 120:
 this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.OR,this._$.first_line,this._$.first_column+1); 
break;
case 121:
 this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.AND,this._$.first_line,this._$.first_column+1); 
break;
case 122:
 this.$ = INSTRUCCION.nuevaOperacionUnaria($$[$0], TIPO_OPERACION.NOT,this._$.first_line,this._$.first_column+1); 
break;
case 123:
 this.$ = INSTRUCCION.nuevaOperacionUnaria($$[$0], TIPO_OPERACION.NEGATIVO, this._$.first_line,this._$.first_column+1); 
break;
case 124:
 this.$ = $$[$0-1] 
break;
case 125:
 this.$ = INSTRUCCION.nuevoValor(parseInt($$[$0]), TIPO_VALOR.ENTERO, this._$.first_line,this._$.first_column+1); 
break;
case 126:
 this.$ = INSTRUCCION.nuevoValor(parseFloat($$[$0]), TIPO_VALOR.DECIMAL, this._$.first_line,this._$.first_column+1); 
break;
case 127:
 this.$ = INSTRUCCION.nuevoValor($$[$0], TIPO_VALOR.CARACTER, this._$.first_line,this._$.first_column+1); 
break;
case 128: case 129:
 this.$ = INSTRUCCION.nuevoValor($$[$0], TIPO_VALOR.BANDERA, this._$.first_line,this._$.first_column+1); 
break;
case 130:
 this.$ = INSTRUCCION.nuevoValor($$[$0], TIPO_VALOR.CADENA, this._$.first_line,this._$.first_column+1); 
break;
case 131:
 this.$ = INSTRUCCION.nuevoValor($$[$0], TIPO_VALOR.IDENTIFICADOR, this._$.first_line,this._$.first_column+1); 
break;
case 132:
 this.$ = INSTRUCCION.nuevoFNat($$[$0-1], TIPO_OPERACION.LOWER, this._$.first_line,this._$.first_column+1 ); 
break;
case 133:
 this.$ = INSTRUCCION.nuevoFNat($$[$0-1], TIPO_OPERACION.UPPER, this._$.first_line,this._$.first_column+1 ); 
break;
case 134:
 this.$ = INSTRUCCION.nuevoFNat($$[$0-1], TIPO_OPERACION.TSTRING, this._$.first_line,this._$.first_column+1 ); 
break;
case 135:
 this.$ = INSTRUCCION.nuevoFNat($$[$0-1], TIPO_OPERACION.TYPEOF, this._$.first_line,this._$.first_column+1 ); 
break;
case 136:
 this.$ = INSTRUCCION.nuevoFNat($$[$0-1], TIPO_OPERACION.ROUND, this._$.first_line,this._$.first_column+1 ); 
break;
case 137:
 this.$ = INSTRUCCION.nuevoFNat($$[$0-1], TIPO_OPERACION.TRUNCATE, this._$.first_line,this._$.first_column+1 ); 
break;
case 138:
 this.$ = INSTRUCCION.nuevoFNat($$[$0-1], TIPO_OPERACION.LENGTH, this._$.first_line,this._$.first_column+1 ); 
break;
case 139:
 this.$ = INSTRUCCION.nuevoCasteo($$[$0-2], TIPO_OPERACION.CASTEO, $$[$0] ,this._$.first_line,this._$.first_column+1 ); 
break;
}
},
table: [{3:1,4:2,5:$V0,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:$V1,26:$V2,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,35:$V8,36:23,37:$V9,43:$Va,44:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,53:$Vh,54:$Vi,55:$Vj,57:$Vk,63:$Vl,67:$Vm,71:$Vn,72:$Vo,73:$Vp},{1:[3]},{5:[1,49],6:50,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:$V1,26:$V2,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,35:$V8,36:23,37:$V9,43:$Va,44:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,53:$Vh,54:$Vi,55:$Vj,57:$Vk,63:$Vl,67:$Vm,71:$Vn,72:$Vo,73:$Vp},o($Vq,[2,3]),o($Vq,[2,4]),o($Vq,[2,5]),o($Vq,[2,6]),o($Vq,[2,7]),o($Vq,[2,8]),o($Vq,[2,9]),o($Vq,[2,10]),o($Vq,[2,11]),o($Vq,[2,12]),o($Vq,[2,13]),o($Vq,[2,14]),o($Vq,[2,15]),o($Vq,[2,16]),o($Vq,[2,17]),o($Vq,[2,18]),o($Vq,[2,19]),o($Vq,[2,20]),o($Vq,[2,21]),o($Vq,[2,22]),{37:[1,51]},{26:[1,52]},{37:[1,53]},{26:[1,57],38:[1,55],39:[1,56],41:$Vr},{37:[1,58]},{26:[1,59]},{26:[1,60]},{26:[1,61]},{26:[1,62]},{29:[1,63]},{25:$Vs,26:$Vt,27:65,29:[1,64],30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,37:$VA,76:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI},{29:[1,83]},{51:[1,84]},{26:[1,85]},{26:[1,86]},{26:[1,87]},{26:[1,88]},{26:[1,89]},{26:[1,90]},{26:[1,91]},{36:92,43:$Va,44:$Vb,45:$Vc,46:$Vd,47:$Ve},o($VJ,[2,39]),o($VJ,[2,40]),o($VJ,[2,41]),o($VJ,[2,42]),o($VJ,[2,43]),{1:[2,1]},o($Vq,[2,2]),{26:[1,95],29:$VK,41:$VL},{25:$Vs,26:$Vt,27:96,28:[1,97],30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,37:$VA,76:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI},{26:[1,98]},{25:$Vs,26:$Vt,27:99,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,37:$VA,76:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI},{29:[1,100]},{29:[1,101]},{25:$Vs,26:$Vt,27:104,28:[1,102],30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,37:$VA,64:103,76:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI},{26:[1,105]},{25:$Vs,26:$Vt,27:106,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,37:$VA,76:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI},{25:$Vs,26:$Vt,27:107,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,37:$VA,76:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI},{25:$Vs,26:$Vt,27:108,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,37:$VA,76:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI},{7:109,10:110,36:111,37:[1,112],43:$Va,44:$Vb,45:$Vc,46:$Vd,47:$Ve},o($Vq,[2,101]),o($Vq,[2,103]),{29:[1,113],74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW,85:$VX,86:$VY,87:$VZ,88:$V_},o($V$,[2,131],{26:[1,129]}),{25:$Vs,26:$Vt,27:130,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,37:$VA,76:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI},{25:$Vs,26:$Vt,27:131,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,37:$VA,76:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI},{25:$Vs,26:$Vt,27:132,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:133,37:$VA,43:$Va,44:$Vb,45:$Vc,46:$Vd,47:$Ve,76:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI},o($V$,[2,125]),o($V$,[2,126]),o($V$,[2,127]),o($V$,[2,128]),o($V$,[2,129]),o($V$,[2,130]),{26:[1,134]},{26:[1,135]},{26:[1,136]},{26:[1,137]},{26:[1,138]},{26:[1,139]},{26:[1,140]},o($Vq,[2,102]),{4:141,5:$V0,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:$V1,26:$V2,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,35:$V8,36:23,37:$V9,43:$Va,44:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,52:[1,142],53:$Vh,54:$Vi,55:$Vj,57:$Vk,63:$Vl,67:$Vm,71:$Vn,72:$Vo,73:$Vp},{25:$Vs,26:$Vt,27:143,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,37:$VA,76:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI},{25:$Vs,26:$Vt,27:144,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,37:$VA,76:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI},{25:$Vs,26:$Vt,27:145,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,37:$VA,76:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI},{25:$Vs,26:$Vt,27:146,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,37:$VA,76:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI},{25:$Vs,26:$Vt,27:147,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,37:$VA,76:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI},{25:$Vs,26:$Vt,27:148,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,37:$VA,76:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI},{25:$Vs,26:$Vt,27:149,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,37:$VA,76:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI},{28:[1,150]},o($V01,[2,37]),{25:$Vs,26:$Vt,27:151,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,37:$VA,76:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI},{28:[1,152],36:155,43:$Va,44:$Vb,45:$Vc,46:$Vd,47:$Ve,66:153,69:154},{28:[1,156],74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW,85:$VX,86:$VY,87:$VZ,88:$V_},{29:[1,157]},{28:[1,158],36:155,43:$Va,44:$Vb,45:$Vc,46:$Vd,47:$Ve,66:159,69:154},{29:[1,160],74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW,85:$VX,86:$VY,87:$VZ,88:$V_},o($Vq,[2,31]),o($Vq,[2,32]),{29:[1,161]},{28:[1,162],65:$V11},o($V21,[2,71],{74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW,85:$VX,86:$VY,87:$VZ,88:$V_}),{25:$Vs,26:$Vt,27:104,28:[1,164],30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,37:$VA,64:165,76:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI},{28:[1,166],74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW,85:$VX,86:$VY,87:$VZ,88:$V_},{28:[1,167],74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW,85:$VX,86:$VY,87:$VZ,88:$V_},{28:[1,168],74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW,85:$VX,86:$VY,87:$VZ,88:$V_},{25:$Vs,26:$Vt,27:169,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,37:$VA,76:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI},{25:$Vs,26:$Vt,27:170,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,37:$VA,76:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI},{37:[1,171]},{41:$Vr},o($Vq,[2,104]),{25:$Vs,26:$Vt,27:172,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,37:$VA,76:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI},{25:$Vs,26:$Vt,27:173,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,37:$VA,76:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI},{25:$Vs,26:$Vt,27:174,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,37:$VA,76:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI},{25:$Vs,26:$Vt,27:175,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,37:$VA,76:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI},{25:$Vs,26:$Vt,27:176,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,37:$VA,76:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI},{25:$Vs,26:$Vt,27:177,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,37:$VA,76:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI},{25:$Vs,26:$Vt,27:178,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,37:$VA,76:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI},{25:$Vs,26:$Vt,27:179,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,37:$VA,76:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI},{25:$Vs,26:$Vt,27:180,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,37:$VA,76:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI},{25:$Vs,26:$Vt,27:181,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,37:$VA,76:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI},{25:$Vs,26:$Vt,27:182,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,37:$VA,76:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI},{25:$Vs,26:$Vt,27:183,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,37:$VA,76:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI},{25:$Vs,26:$Vt,27:184,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,37:$VA,76:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI},{25:$Vs,26:$Vt,27:185,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,37:$VA,76:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI},{25:$Vs,26:$Vt,27:186,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,37:$VA,76:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI},{25:$Vs,26:$Vt,27:104,28:[1,187],30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,37:$VA,64:188,76:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI},o($V31,[2,122],{75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW,85:$VX,86:$VY}),o($V$,[2,123]),{28:[1,189],74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW,85:$VX,86:$VY,87:$VZ,88:$V_},{28:[1,190]},{25:$Vs,26:$Vt,27:191,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,37:$VA,76:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI},{25:$Vs,26:$Vt,27:192,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,37:$VA,76:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI},{25:$Vs,26:$Vt,27:193,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,37:$VA,76:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI},{25:$Vs,26:$Vt,27:194,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,37:$VA,76:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI},{25:$Vs,26:$Vt,27:195,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,37:$VA,76:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI},{25:$Vs,26:$Vt,27:196,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,37:$VA,76:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI},{25:$Vs,26:$Vt,27:197,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,37:$VA,76:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI},{6:50,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:$V1,26:$V2,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,35:$V8,36:23,37:$V9,43:$Va,44:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,52:[1,198],53:$Vh,54:$Vi,55:$Vj,57:$Vk,63:$Vl,67:$Vm,71:$Vn,72:$Vo,73:$Vp},{54:[1,199]},{28:[1,200],74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW,85:$VX,86:$VY,87:$VZ,88:$V_},{28:[1,201],74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW,85:$VX,86:$VY,87:$VZ,88:$V_},{28:[1,202],74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW,85:$VX,86:$VY,87:$VZ,88:$V_},{28:[1,203],74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW,85:$VX,86:$VY,87:$VZ,88:$V_},{28:[1,204],74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW,85:$VX,86:$VY,87:$VZ,88:$V_},{28:[1,205],74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW,85:$VX,86:$VY,87:$VZ,88:$V_},{28:[1,206],74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW,85:$VX,86:$VY,87:$VZ,88:$V_},{25:$Vs,26:$Vt,27:207,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,37:$VA,76:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI},{29:[1,208],74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW,85:$VX,86:$VY,87:$VZ,88:$V_},{51:[1,209]},{28:[1,210],65:$V41},o($V21,[2,79]),{37:[1,212]},{29:[1,213]},o($Vq,[2,45]),{51:[1,214]},{28:[1,215],65:$V41},o($V01,[2,35]),o($Vq,[2,72]),{29:[1,216]},{25:$Vs,26:$Vt,27:217,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,37:$VA,76:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI},{29:[1,218]},{28:[1,219],65:$V11},{51:[1,220]},{51:[1,221]},{51:[1,222]},{29:[1,223],74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW,85:$VX,86:$VY,87:$VZ,88:$V_},{29:[1,224],74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW,85:$VX,86:$VY,87:$VZ,88:$V_},{29:$VK,41:$VL},{60:[1,225],74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW,85:$VX,86:$VY,87:$VZ,88:$V_},o($V51,[2,108],{77:$VP,78:$VQ,79:$VR,80:$VS}),o($V51,[2,109],{77:$VP,78:$VQ,79:$VR,80:$VS}),o($V61,[2,110],{79:$VR}),o($V61,[2,111],{79:$VR}),o($V$,[2,112]),o($V61,[2,113],{79:$VR}),o($V71,[2,114],{75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS}),o($V71,[2,115],{75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS}),o($V71,[2,116],{75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS}),o($V71,[2,117],{75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS}),o($V71,[2,118],{75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS}),o($V71,[2,119],{75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS}),o([28,29,60,65,74,87],[2,120],{75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW,85:$VX,86:$VY,88:$V_}),o($V31,[2,121],{75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW,85:$VX,86:$VY}),o($V$,[2,105]),{28:[1,226],65:$V11},o($V$,[2,124]),{25:$Vs,26:$Vt,27:227,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,37:$VA,76:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI},{28:[1,228],74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW,85:$VX,86:$VY,87:$VZ,88:$V_},{28:[1,229],74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW,85:$VX,86:$VY,87:$VZ,88:$V_},{28:[1,230],74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW,85:$VX,86:$VY,87:$VZ,88:$V_},{28:[1,231],74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW,85:$VX,86:$VY,87:$VZ,88:$V_},{28:[1,232],74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW,85:$VX,86:$VY,87:$VZ,88:$V_},{28:[1,233],74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW,85:$VX,86:$VY,87:$VZ,88:$V_},{28:[1,234],74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW,85:$VX,86:$VY,87:$VZ,88:$V_},{54:[1,235]},{26:[1,236]},{29:[1,237]},{29:[1,238]},{29:[1,239]},{29:[1,240]},{29:[1,241]},{29:[1,242]},{29:[1,243]},{29:[1,244],74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW,85:$VX,86:$VY,87:$VZ,88:$V_},o($V01,[2,38]),{4:245,5:$V0,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:$V1,26:$V2,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,35:$V8,36:23,37:$V9,43:$Va,44:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,53:$Vh,54:$Vi,55:$Vj,57:$Vk,63:$Vl,67:$Vm,71:$Vn,72:$Vo,73:$Vp},{51:[1,246]},{36:155,43:$Va,44:$Vb,45:$Vc,46:$Vd,47:$Ve,69:247},o($V21,[2,80]),o($Vq,[2,44]),{7:250,8:251,9:252,10:253,11:254,12:255,13:256,14:257,15:258,16:259,17:260,18:261,19:262,20:263,21:264,22:265,23:266,24:267,25:$V1,26:$V2,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,35:$V8,36:23,37:$V9,43:$Va,44:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,53:$Vh,54:$Vi,55:$Vj,57:$Vk,63:$Vl,67:$Vm,68:248,70:249,71:$Vn,72:$Vo,73:$Vp},{51:[1,268]},o($Vq,[2,73]),o($V21,[2,70],{74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW,85:$VX,86:$VY,87:$VZ,88:$V_}),o($Vq,[2,68]),{29:[1,269]},{4:270,5:$V0,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:$V1,26:$V2,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,35:$V8,36:23,37:$V9,43:$Va,44:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,52:[1,271],53:$Vh,54:$Vi,55:$Vj,57:$Vk,63:$Vl,67:$Vm,71:$Vn,72:$Vo,73:$Vp},{4:272,5:$V0,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:$V1,26:$V2,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,35:$V8,36:23,37:$V9,43:$Va,44:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,52:[1,273],53:$Vh,54:$Vi,55:$Vj,57:$Vk,63:$Vl,67:$Vm,71:$Vn,72:$Vo,73:$Vp},{58:274,61:[1,275]},{37:$V81,40:277,42:278,50:276},{37:$V81,40:277,42:278,50:280},{25:$Vs,26:$Vt,27:281,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,37:$VA,76:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI},o($V$,[2,106]),o($V31,[2,139],{75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW,85:$VX,86:$VY}),o($V$,[2,132]),o($V$,[2,133]),o($V$,[2,134]),o($V$,[2,135]),o($V$,[2,136]),o($V$,[2,137]),o($V$,[2,138]),{26:[1,282]},{25:$Vs,26:$Vt,27:283,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,37:$VA,76:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI},o($Vq,[2,23]),o($Vq,[2,24]),o($Vq,[2,25]),o($Vq,[2,26]),o($Vq,[2,27]),o($Vq,[2,28]),o($Vq,[2,29]),o($Vq,[2,30]),{6:50,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:$V1,26:$V2,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,35:$V8,36:23,37:$V9,43:$Va,44:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,52:[1,284],53:$Vh,54:$Vi,55:$Vj,57:$Vk,63:$Vl,67:$Vm,71:$Vn,72:$Vo,73:$Vp},{4:285,5:$V0,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:$V1,26:$V2,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,35:$V8,36:23,37:$V9,43:$Va,44:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,53:$Vh,54:$Vi,55:$Vj,57:$Vk,63:$Vl,67:$Vm,71:$Vn,72:$Vo,73:$Vp},o($V21,[2,78]),{7:250,8:251,9:252,10:253,11:254,12:255,13:256,14:257,15:258,16:259,17:260,18:261,19:262,20:263,21:264,22:265,23:266,24:267,25:$V1,26:$V2,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,35:$V8,36:23,37:$V9,43:$Va,44:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,52:[1,286],53:$Vh,54:$Vi,55:$Vj,57:$Vk,63:$Vl,67:$Vm,70:287,71:$Vn,72:$Vo,73:$Vp},o($V91,[2,82]),o($V91,[2,83]),o($V91,[2,84]),o($V91,[2,85]),o($V91,[2,86]),o($V91,[2,87]),o($V91,[2,88]),o($V91,[2,89]),o($V91,[2,90]),o($V91,[2,91]),o($V91,[2,92]),o($V91,[2,93]),o($V91,[2,94]),o($V91,[2,95]),o($V91,[2,96]),o($V91,[2,97]),o($V91,[2,98]),o($V91,[2,99]),o($V91,[2,100]),{7:250,8:251,9:252,10:253,11:254,12:255,13:256,14:257,15:258,16:259,17:260,18:261,19:262,20:263,21:264,22:265,23:266,24:267,25:$V1,26:$V2,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,35:$V8,36:23,37:$V9,43:$Va,44:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,53:$Vh,54:$Vi,55:$Vj,57:$Vk,63:$Vl,67:$Vm,68:288,70:249,71:$Vn,72:$Vo,73:$Vp},o($Vq,[2,69]),{6:50,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:$V1,26:$V2,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,35:$V8,36:23,37:$V9,43:$Va,44:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,52:[1,289],53:$Vh,54:$Vi,55:$Vj,57:$Vk,63:$Vl,67:$Vm,71:$Vn,72:$Vo,73:$Vp},o($Vq,[2,57],{56:[1,290]}),{6:50,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:$V1,26:$V2,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,35:$V8,36:23,37:$V9,43:$Va,44:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,52:[1,291],53:$Vh,54:$Vi,55:$Vj,57:$Vk,63:$Vl,67:$Vm,71:$Vn,72:$Vo,73:$Vp},o($Vq,[2,67]),{52:[1,292],59:[1,293],61:[1,294]},{25:$Vs,26:$Vt,27:295,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,37:$VA,76:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI},{28:[1,296]},{28:[2,50]},{28:[2,51]},{38:[1,297],39:[1,298],41:[1,299]},{28:[1,300]},o([28,29,60,65,74],[2,107],{75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW,85:$VX,86:$VY,87:$VZ,88:$V_}),{25:$Vs,26:$Vt,27:301,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,37:$VA,76:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI},{28:[1,302],74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW,85:$VX,86:$VY,87:$VZ,88:$V_},o($Vq,[2,74]),{6:50,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:$V1,26:$V2,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,35:$V8,36:23,37:$V9,43:$Va,44:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,52:[1,303],53:$Vh,54:$Vi,55:$Vj,57:$Vk,63:$Vl,67:$Vm,71:$Vn,72:$Vo,73:$Vp},o($Vq,[2,76]),o($V91,[2,81]),{7:250,8:251,9:252,10:253,11:254,12:255,13:256,14:257,15:258,16:259,17:260,18:261,19:262,20:263,21:264,22:265,23:266,24:267,25:$V1,26:$V2,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,35:$V8,36:23,37:$V9,43:$Va,44:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,52:[1,304],53:$Vh,54:$Vi,55:$Vj,57:$Vk,63:$Vl,67:$Vm,70:287,71:$Vn,72:$Vo,73:$Vp},o($Vq,[2,54],{56:[1,305]}),{12:306,51:[1,307],55:$Vj},o($Vq,[2,66]),o($Vq,[2,60]),{60:[1,308]},{25:$Vs,26:$Vt,27:309,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,37:$VA,76:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI},{60:$Va1,62:310,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW,85:$VX,86:$VY,87:$VZ,88:$V_},{51:[1,312]},{28:[2,33]},{28:[2,34]},{25:$Vs,26:$Vt,27:313,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,37:$VA,76:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI},{51:[1,314]},{28:[1,315],74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW,85:$VX,86:$VY,87:$VZ,88:$V_},{29:[1,316]},o($Vq,[2,75]),o($Vq,[2,77]),{12:317,51:[1,318],55:$Vj},o($Vq,[2,58]),{52:[1,319]},{4:320,5:$V0,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:$V1,26:$V2,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,35:$V8,36:23,37:$V9,43:$Va,44:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,53:$Vh,54:$Vi,55:$Vj,57:$Vk,63:$Vl,67:$Vm,71:$Vn,72:$Vo,73:$Vp},{60:$Va1,62:321,74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW,85:$VX,86:$VY,87:$VZ,88:$V_},o($Vb1,[2,63]),o($Vb1,[2,64],{6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,36:23,4:322,5:$V0,25:$V1,26:$V2,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,35:$V8,37:$V9,43:$Va,44:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,53:$Vh,54:$Vi,55:$Vj,57:$Vk,63:$Vl,67:$Vm,71:$Vn,72:$Vo,73:$Vp}),{4:323,5:$V0,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:$V1,26:$V2,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,35:$V8,36:23,37:$V9,43:$Va,44:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,52:[1,324],53:$Vh,54:$Vi,55:$Vj,57:$Vk,63:$Vl,67:$Vm,71:$Vn,72:$Vo,73:$Vp},{28:[2,36],74:$VM,75:$VN,76:$VO,77:$VP,78:$VQ,79:$VR,80:$VS,81:$VT,82:$VU,83:$VV,84:$VW,85:$VX,86:$VY,87:$VZ,88:$V_},{4:325,5:$V0,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:$V1,26:$V2,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,35:$V8,36:23,37:$V9,43:$Va,44:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,52:[1,326],53:$Vh,54:$Vi,55:$Vj,57:$Vk,63:$Vl,67:$Vm,71:$Vn,72:$Vo,73:$Vp},{29:[1,327]},o($Vq,[2,53]),o($Vq,[2,55]),{4:328,5:$V0,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:$V1,26:$V2,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,35:$V8,36:23,37:$V9,43:$Va,44:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,53:$Vh,54:$Vi,55:$Vj,57:$Vk,63:$Vl,67:$Vm,71:$Vn,72:$Vo,73:$Vp},o($Vq,[2,59]),{6:50,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:$V1,26:$V2,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,35:$V8,36:23,37:$V9,43:$Va,44:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,52:[1,329],53:$Vh,54:$Vi,55:$Vj,57:$Vk,63:$Vl,67:$Vm,71:$Vn,72:$Vo,73:$Vp},o($Vb1,[2,62]),o($Vb1,[2,65],{7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,36:23,6:50,25:$V1,26:$V2,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,35:$V8,37:$V9,43:$Va,44:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,53:$Vh,54:$Vi,55:$Vj,57:$Vk,63:$Vl,67:$Vm,71:$Vn,72:$Vo,73:$Vp}),{6:50,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:$V1,26:$V2,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,35:$V8,36:23,37:$V9,43:$Va,44:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,52:[1,330],53:$Vh,54:$Vi,55:$Vj,57:$Vk,63:$Vl,67:$Vm,71:$Vn,72:$Vo,73:$Vp},o($Vq,[2,48]),{6:50,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:$V1,26:$V2,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,35:$V8,36:23,37:$V9,43:$Va,44:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,52:[1,331],53:$Vh,54:$Vi,55:$Vj,57:$Vk,63:$Vl,67:$Vm,71:$Vn,72:$Vo,73:$Vp},o($Vq,[2,49]),o($Vq,[2,52]),{6:50,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:$V1,26:$V2,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,35:$V8,36:23,37:$V9,43:$Va,44:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf,49:$Vg,52:[1,332],53:$Vh,54:$Vi,55:$Vj,57:$Vk,63:$Vl,67:$Vm,71:$Vn,72:$Vo,73:$Vp},o($Vq,[2,61]),o($Vq,[2,46]),o($Vq,[2,47]),o($Vq,[2,56])],
defaultActions: {49:[2,1],277:[2,50],278:[2,51],297:[2,33],298:[2,34]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	const TIPO_OPERACION	= require('./Controladores/Tipos/TipoOperacion');
	const TIPO_VALOR 		  = require('./Controladores/Tipos/TipoValor');
	const TIPO_DATO			  = require('./Controladores/Tipos/TipoDato'); //para jalar el tipo de dato
	const INSTRUCCION	    = require('./Controladores/Instrucciones/Instruccion');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3: yy_.yytext = yy_.yytext.substr(0,yy_.yyleng); return 92; 
break;
case 4: yy_.yytext = yy_.yytext.substr(0,yy_.yyleng); return 95; 
break;
case 5:return 48;
break;
case 6:return 25;
break;
case 7:return 30;
break;
case 8:return 63;
break;
case 9:return 35;
break;
case 10:return 34;
break;
case 11:return 33;
break;
case 12:return 32;
break;
case 13:return 31;
break;
case 14:return 'Rchararray';
break;
case 15:return 43;
break;
case 16:return 44;
break;
case 17:return 47;
break;
case 18:return 46;
break;
case 19:return 45;
break;
case 20:return 54;
break;
case 21:return 53;
break;
case 22:return 55;
break;
case 23:return 56;
break;
case 24:return 49;
break;
case 25:return 57;
break;
case 26:return 61;
break;
case 27:return 59;
break;
case 28:return 71;
break;
case 29:return 72;
break;
case 30:return 73;
break;
case 31:return 67;
break;
case 32:return 82;
break;
case 33:return 81;
break;
case 34:return 84;
break;
case 35:return 86;
break;
case 36:return 85;
break;
case 37:return 83;
break;
case 38:return 38;
break;
case 39:return 39;
break;
case 40:return 93;
break;
case 41:return 94;
break;
case 42:return 41;
break;
case 43:return 75;
break;
case 44:return 76;
break;
case 45:return 77;
break;
case 46:return 78;
break;
case 47:return 79;
break;
case 48:return 80;
break;
case 49:return 89;
break;
case 50:return 88;
break;
case 51:return 87;
break;
case 52:return 74
break;
case 53:return 26;
break;
case 54:return 28;
break;
case 55:return 65;
break;
case 56:return 29;
break;
case 57:return 60;
break;
case 58:return 51;
break;
case 59:return 52;
break;
case 60:return 'saltolinea';
break;
case 61:return 'barrainv';
break;
case 62:return 'comillasim';
break;
case 63:return 'comilladob';
break;
case 64:return 'tab';
break;
case 65:return 91;
break;
case 66:return 90;
break;
case 67:return 37;
break;
case 68:return 5
break;
case 69:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:'((\\')|[^\n\'])')/i,/^(?:"((\\")|[^\n\"])*")/i,/^(?:print\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:exec\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:for\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:=)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:!)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:\?)/i,/^(?:\()/i,/^(?:\))/i,/^(?:,)/i,/^(?:;)/i,/^(?::)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\\n)/i,/^(?:\\)/i,/^(?:\\')/i,/^(?:")/i,/^(?:\\t)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])([a-zA-Z0-9_])*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}