/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,16],$V2=[1,15],$V3=[1,20],$V4=[1,21],$V5=[1,22],$V6=[1,23],$V7=[1,24],$V8=[1,14],$V9=[1,17],$Va=[1,19],$Vb=[1,18],$Vc=[5,15,16,23,24,25,26,27,28,29,31,33,36,38,39],$Vd=[1,30],$Ve=[1,47],$Vf=[1,40],$Vg=[1,39],$Vh=[1,38],$Vi=[1,41],$Vj=[1,42],$Vk=[1,43],$Vl=[1,44],$Vm=[1,45],$Vn=[1,46],$Vo=[1,59],$Vp=[1,60],$Vq=[1,61],$Vr=[1,62],$Vs=[1,63],$Vt=[1,64],$Vu=[1,65],$Vv=[1,66],$Vw=[1,67],$Vx=[1,68],$Vy=[1,69],$Vz=[1,70],$VA=[1,71],$VB=[1,72],$VC=[18,19,37,48,49,50,51,52,53,54,55,56,57,58,59,60,61],$VD=[18,43],$VE=[18,19,37,60,61],$VF=[1,108],$VG=[18,19,37,48,49,54,55,56,57,58,59,60,61],$VH=[18,19,37,48,49,50,51,53,54,55,56,57,58,59,60,61],$VI=[18,19,37,54,55,56,57,58,59,60,61],$VJ=[16,23,24,25,26,27,28,31,39],$VK=[1,122],$VL=[1,123],$VM=[31,36,38];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"OPCIONESCUERPO":4,"EOF":5,"CUERPO":6,"DEC_VAR":7,"IMPRIMIR":8,"DEC_MET":9,"AS_VAR":10,"EXEC":11,"RSIF":12,"WHILE":13,"SWITCHCASE":14,"Rexec":15,"identificador":16,"parA":17,"parC":18,"ptcoma":19,"igual":20,"EXPRESION":21,"TIPO":22,"Rentero":23,"Rdoble":24,"Rcadena":25,"Rcarater":26,"Rbooleano":27,"Rprint":28,"Rif":29,"llaveA":30,"llaveC":31,"Relse":32,"Rswitch":33,"LISTACASOS":34,"CASOS_EVALUAR":35,"Rcase":36,"dospts":37,"Rdefault":38,"Rwhile":39,"LLAMADA_METODO":40,"OPCIONESMETODO":41,"LISTAPARAMETROS":42,"coma":43,"PARAMETROS":44,"CUERPOMETODO":45,"BREAK":46,"Rbreak":47,"mass":48,"menoss":49,"porr":50,"divv":51,"pott":52,"modd":53,"dif":54,"igualii":55,"menorr":56,"menorii":57,"mayorr":58,"mayorii":59,"orr":60,"andd":61,"nott":62,"enteroo":63,"decimall":64,"caracterr":65,"Rtrue":66,"Rfalse":67,"cadenaa":68,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",15:"Rexec",16:"identificador",17:"parA",18:"parC",19:"ptcoma",20:"igual",23:"Rentero",24:"Rdoble",25:"Rcadena",26:"Rcarater",27:"Rbooleano",28:"Rprint",29:"Rif",30:"llaveA",31:"llaveC",32:"Relse",33:"Rswitch",36:"Rcase",37:"dospts",38:"Rdefault",39:"Rwhile",43:"coma",47:"Rbreak",48:"mass",49:"menoss",50:"porr",51:"divv",52:"pott",53:"modd",54:"dif",55:"igualii",56:"menorr",57:"menorii",58:"mayorr",59:"mayorii",60:"orr",61:"andd",62:"nott",63:"enteroo",64:"decimall",65:"caracterr",66:"Rtrue",67:"Rfalse",68:"cadenaa"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[11,5],[10,4],[7,3],[7,5],[22,1],[22,1],[22,1],[22,1],[22,1],[8,5],[12,7],[12,9],[12,11],[14,7],[34,2],[34,1],[35,4],[35,3],[13,7],[40,4],[9,6],[9,7],[42,3],[42,1],[44,2],[41,2],[41,1],[45,1],[45,1],[45,1],[45,1],[46,2],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,2],[21,2],[21,3],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2: case 38:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 39:
 this.$ = [$$[$0]]; 
break;
case 4:
 this.$ = $$[$0]; 
break;
case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 40: case 41: case 42: case 43:
 this.$ = $$[$0] 
break;
case 13:
 this.$ = INSTRUCCION.nuevoExec($$[$0-3], null, this._$.first_line,this._$.first_column+1) 
break;
case 14:
 this.$ = INSTRUCCION.nuevaAsignacion($$[$0-3], $$[$0-1], this._$.first_line,this._$.first_column+1) 
break;
case 15:
 this.$ = INSTRUCCION.nuevaDeclaracion($$[$0-1], null, $$[$0-2], this._$.first_line,this._$.first_column+1) 
break;
case 16:
 this.$ = INSTRUCCION.nuevaDeclaracion($$[$0-3], $$[$0-1], $$[$0-4], this._$.first_line,this._$.first_column+1) 
break;
case 17:
 this.$ = TIPO_DATO.ENTERO 
break;
case 18:
 this.$ = TIPO_DATO.DECIMAL 
break;
case 19:
 this.$ = TIPO_DATO.CADENA 
break;
case 20:
 this.$ = TIPO_DATO.CARACTER 
break;
case 21:
 this.$ = TIPO_DATO.BANDERA 
break;
case 22:
 this.$ = new INSTRUCCION.nuevoPrint($$[$0-2], this._$.first_line,this._$.first_column+1) 
break;
case 23:
 this.$ = new INSTRUCCION.nuevoIf($$[$0-4], $$[$0-1], null, this._$.first_line,this._$.first_column+1); 
break;
case 24:
 this.$ = new INSTRUCCION.nuevoIf($$[$0-6], $$[$0-3], Array($$[$0]), this._$.first_line,this._$.first_column+1); 
break;
case 25:
 this.$ = new INSTRUCCION.nuevoIf($$[$0-8], $$[$0-5], $$[$0-1], this._$.first_line,this._$.first_column+1); 
break;
case 26:
 this.$ = INSTRUCCION.nuevoSwitch($$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1);
break;
case 27:
 this.$ = $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 28:
 this.$ = INSTRUCCION.nuevoListaCasos($$[$0], this._$.first_line,this._$.first_column+1); 
break;
case 29:
 this.$ = INSTRUCCION.nuevoCaso($$[$0-2], $$[$0] , this._$.first_line,this._$.first_column+1); 
break;
case 30:
 this.$ = INSTRUCCION.nuevoCasoDef($$[$0] , this._$.first_line,this._$.first_column+1); 
break;
case 31:
 this.$ = new INSTRUCCION.nuevoWhile($$[$0-4], $$[$0-1] , this._$.first_line,this._$.first_column+1) 
break;
case 32:
 this.$ = INSTRUCCION.nuevaLlamada($$[$0-3], null, this._$.first_line,this._$.first_column+1) 
break;
case 44: case 61:
 this.$ = $$[$0-1] 
break;
case 45:
 this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.SUMA,this._$.first_line,this._$.first_column+1); 
break;
case 46:
 this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.RESTA,this._$.first_line,this._$.first_column+1); 
break;
case 47:
 this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MULTIPLICACION,this._$.first_line,this._$.first_column+1); 
break;
case 48:
 this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.DIVISION,this._$.first_line,this._$.first_column+1); 
break;
case 49:
 this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.POTENCIA,this._$.first_line,this._$.first_column+1); 
break;
case 50:
 this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MODULO,this._$.first_line,this._$.first_column+1); 
break;
case 51:
 this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.DIFERENTE,this._$.first_line,this._$.first_column+1); 
break;
case 52:
 this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.IGUALIGUAL,this._$.first_line,this._$.first_column+1); 
break;
case 53:
 this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MENOR,this._$.first_line,this._$.first_column+1); 
break;
case 54:
 this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MENORIGUAL,this._$.first_line,this._$.first_column+1); 
break;
case 55:
 this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MAYOR,this._$.first_line,this._$.first_column+1); 
break;
case 56:
 this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MAYORIGUAL,this._$.first_line,this._$.first_column+1); 
break;
case 57:
 this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.OR,this._$.first_line,this._$.first_column+1); 
break;
case 58:
 this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.AND,this._$.first_line,this._$.first_column+1); 
break;
case 59:
 this.$ = INSTRUCCION.nuevaOperacionUnaria($$[$0], TIPO_OPERACION.NOT,this._$.first_line,this._$.first_column+1); 
break;
case 60:
 this.$ = INSTRUCCION.nuevaOperacionUnaria($$[$0], TIPO_OPERACION.NEGATIVO, this._$.first_line,this._$.first_column+1); 
break;
case 62:
 this.$ = INSTRUCCION.nuevoValor(parseInt($$[$0]), TIPO_VALOR.ENTERO, this._$.first_line,this._$.first_column+1); 
break;
case 63:
 this.$ = INSTRUCCION.nuevoValor(parseFloat($$[$0]), TIPO_VALOR.DECIMAL, this._$.first_line,this._$.first_column+1); 
break;
case 64:
 this.$ = INSTRUCCION.nuevoValor($$[$0], TIPO_VALOR.CARACTER, this._$.first_line,this._$.first_column+1); 
break;
case 65: case 66:
 this.$ = INSTRUCCION.nuevoValor($$[$0], TIPO_VALOR.BANDERA, this._$.first_line,this._$.first_column+1); 
break;
case 67:
 this.$ = INSTRUCCION.nuevoValor($$[$0], TIPO_VALOR.CADENA, this._$.first_line,this._$.first_column+1); 
break;
case 68:
 this.$ = INSTRUCCION.nuevoValor($$[$0], TIPO_VALOR.IDENTIFICADOR, this._$.first_line,this._$.first_column+1); 
break;
}
},
table: [{3:1,4:2,5:$V0,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:$V1,16:$V2,22:13,23:$V3,24:$V4,25:$V5,26:$V6,27:$V7,28:$V8,29:$V9,33:$Va,39:$Vb},{1:[3]},{5:[1,25],6:26,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:$V1,16:$V2,22:13,23:$V3,24:$V4,25:$V5,26:$V6,27:$V7,28:$V8,29:$V9,33:$Va,39:$Vb},o($Vc,[2,3]),o($Vc,[2,4]),o($Vc,[2,5]),o($Vc,[2,6]),o($Vc,[2,7]),o($Vc,[2,8]),o($Vc,[2,9]),o($Vc,[2,10]),o($Vc,[2,11]),o($Vc,[2,12]),{16:[1,27]},{17:[1,28]},{17:[1,29],20:$Vd},{16:[1,31]},{17:[1,32]},{17:[1,33]},{17:[1,34]},{16:[2,17]},{16:[2,18]},{16:[2,19]},{16:[2,20]},{16:[2,21]},{1:[2,1]},o($Vc,[2,2]),{19:[1,35],20:[1,36]},{16:$Ve,17:$Vf,21:37,49:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:$Vn},{18:[1,48],22:51,23:$V3,24:$V4,25:$V5,26:$V6,27:$V7,42:49,44:50},{16:$Ve,17:$Vf,21:52,49:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:$Vn},{17:[1,53]},{16:$Ve,17:$Vf,21:54,49:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:$Vn},{16:$Ve,17:$Vf,21:55,49:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:$Vn},{16:$Ve,17:$Vf,21:56,49:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:$Vn},o($Vc,[2,15]),{16:$Ve,17:$Vf,21:57,49:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:$Vn},{18:[1,58],48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB},{16:$Ve,17:$Vf,21:73,49:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:$Vn},{16:$Ve,17:$Vf,21:74,49:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:$Vn},{16:$Ve,17:$Vf,21:75,49:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:$Vn},o($VC,[2,62]),o($VC,[2,63]),o($VC,[2,64]),o($VC,[2,65]),o($VC,[2,66]),o($VC,[2,67]),o($VC,[2,68]),{30:[1,76]},{18:[1,77],43:[1,78]},o($VD,[2,36]),{16:[1,79]},{19:[1,80],48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB},{18:[1,81]},{18:[1,82],48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB},{18:[1,83],48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB},{18:[1,84],48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB},{19:[1,85],48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB},{19:[1,86]},{16:$Ve,17:$Vf,21:87,49:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:$Vn},{16:$Ve,17:$Vf,21:88,49:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:$Vn},{16:$Ve,17:$Vf,21:89,49:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:$Vn},{16:$Ve,17:$Vf,21:90,49:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:$Vn},{16:$Ve,17:$Vf,21:91,49:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:$Vn},{16:$Ve,17:$Vf,21:92,49:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:$Vn},{16:$Ve,17:$Vf,21:93,49:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:$Vn},{16:$Ve,17:$Vf,21:94,49:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:$Vn},{16:$Ve,17:$Vf,21:95,49:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:$Vn},{16:$Ve,17:$Vf,21:96,49:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:$Vn},{16:$Ve,17:$Vf,21:97,49:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:$Vn},{16:$Ve,17:$Vf,21:98,49:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:$Vn},{16:$Ve,17:$Vf,21:99,49:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:$Vn},{16:$Ve,17:$Vf,21:100,49:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:$Vn},o($VE,[2,59],{48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz}),o($VC,[2,60]),{18:[1,101],48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB},{7:104,8:106,10:107,13:105,16:$VF,22:13,23:$V3,24:$V4,25:$V5,26:$V6,27:$V7,28:$V8,39:$Vb,41:102,45:103},{30:[1,109]},{22:51,23:$V3,24:$V4,25:$V5,26:$V6,27:$V7,44:110},o($VD,[2,37]),o($Vc,[2,14]),{19:[1,111]},{30:[1,112]},{30:[1,113]},{30:[1,114]},o($Vc,[2,16]),o($Vc,[2,22]),o($VG,[2,45],{50:$Vq,51:$Vr,52:$Vs,53:$Vt}),o($VG,[2,46],{50:$Vq,51:$Vr,52:$Vs,53:$Vt}),o($VH,[2,47],{52:$Vs}),o($VH,[2,48],{52:$Vs}),o($VC,[2,49]),o($VH,[2,50],{52:$Vs}),o($VI,[2,51],{48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs,53:$Vt}),o($VI,[2,52],{48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs,53:$Vt}),o($VI,[2,53],{48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs,53:$Vt}),o($VI,[2,54],{48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs,53:$Vt}),o($VI,[2,55],{48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs,53:$Vt}),o($VI,[2,56],{48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs,53:$Vt}),o([18,19,37,60],[2,57],{48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz,61:$VB}),o($VE,[2,58],{48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz}),o($VC,[2,61]),{7:104,8:106,10:107,13:105,16:$VF,22:13,23:$V3,24:$V4,25:$V5,26:$V6,27:$V7,28:$V8,31:[1,115],39:$Vb,45:116},o($VJ,[2,39]),o($VJ,[2,40]),o($VJ,[2,41]),o($VJ,[2,42]),o($VJ,[2,43]),{20:$Vd},{7:104,8:106,10:107,13:105,16:$VF,22:13,23:$V3,24:$V4,25:$V5,26:$V6,27:$V7,28:$V8,39:$Vb,41:117,45:103},o($VD,[2,35]),o($Vc,[2,13]),{4:118,5:$V0,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:$V1,16:$V2,22:13,23:$V3,24:$V4,25:$V5,26:$V6,27:$V7,28:$V8,29:$V9,33:$Va,39:$Vb},{4:119,5:$V0,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:$V1,16:$V2,22:13,23:$V3,24:$V4,25:$V5,26:$V6,27:$V7,28:$V8,29:$V9,33:$Va,39:$Vb},{34:120,35:121,36:$VK,38:$VL},o($Vc,[2,33]),o($VJ,[2,38]),{7:104,8:106,10:107,13:105,16:$VF,22:13,23:$V3,24:$V4,25:$V5,26:$V6,27:$V7,28:$V8,31:[1,124],39:$Vb,45:116},{6:26,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:$V1,16:$V2,22:13,23:$V3,24:$V4,25:$V5,26:$V6,27:$V7,28:$V8,29:$V9,31:[1,125],33:$Va,39:$Vb},{6:26,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:$V1,16:$V2,22:13,23:$V3,24:$V4,25:$V5,26:$V6,27:$V7,28:$V8,29:$V9,31:[1,126],33:$Va,39:$Vb},{31:[1,127],35:128,36:$VK,38:$VL},o($VM,[2,28]),{16:$Ve,17:$Vf,21:129,49:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,66:$Vl,67:$Vm,68:$Vn},{37:[1,130]},o($Vc,[2,34]),o($Vc,[2,23],{32:[1,131]}),o($Vc,[2,31]),o($Vc,[2,26]),o($VM,[2,27]),{37:[1,132],48:$Vo,49:$Vp,50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB},{4:133,5:$V0,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:$V1,16:$V2,22:13,23:$V3,24:$V4,25:$V5,26:$V6,27:$V7,28:$V8,29:$V9,33:$Va,39:$Vb},{12:134,29:$V9,30:[1,135]},{4:136,5:$V0,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:$V1,16:$V2,22:13,23:$V3,24:$V4,25:$V5,26:$V6,27:$V7,28:$V8,29:$V9,33:$Va,39:$Vb},o($VM,[2,30],{7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,22:13,6:26,15:$V1,16:$V2,23:$V3,24:$V4,25:$V5,26:$V6,27:$V7,28:$V8,29:$V9,33:$Va,39:$Vb}),o($Vc,[2,24]),{4:137,5:$V0,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:$V1,16:$V2,22:13,23:$V3,24:$V4,25:$V5,26:$V6,27:$V7,28:$V8,29:$V9,33:$Va,39:$Vb},o($VM,[2,29],{7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,22:13,6:26,15:$V1,16:$V2,23:$V3,24:$V4,25:$V5,26:$V6,27:$V7,28:$V8,29:$V9,33:$Va,39:$Vb}),{6:26,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:$V1,16:$V2,22:13,23:$V3,24:$V4,25:$V5,26:$V6,27:$V7,28:$V8,29:$V9,31:[1,138],33:$Va,39:$Vb},o($Vc,[2,25])],
defaultActions: {20:[2,17],21:[2,18],22:[2,19],23:[2,20],24:[2,21],25:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	const TIPO_OPERACION	= require('./Controladores/Tipos/TipoOperacion');
	const TIPO_VALOR 		  = require('./Controladores/Tipos/TipoValor');
	const TIPO_DATO			  = require('./Controladores/Tipos/TipoDato'); //para jalar el tipo de dato
	const INSTRUCCION	    = require('./Controladores/Instrucciones/Instruccion');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3: yy_.yytext = yy_.yytext.substr(0,yy_.yyleng); return 68; 
break;
case 4: yy_.yytext = yy_.yytext.substr(0,yy_.yyleng); return 65; 
break;
case 5:return 28;
break;
case 6:return 'lower';
break;
case 7:return 'upper';
break;
case 8:return 15;
break;
case 9:return 'Rlength';
break;
case 10:return 'Rtruncate';
break;
case 11:return 'Rround';
break;
case 12:return 'Rtypeof';
break;
case 13:return 'Rtostring';
break;
case 14:return 'Rchararray';
break;
case 15:return 23;
break;
case 16:return 24;
break;
case 17:return 27;
break;
case 18:return 26;
break;
case 19:return 25;
break;
case 20:return 39;
break;
case 21:return 'Rdo';
break;
case 22:return 29;
break;
case 23:return 32;
break;
case 24:return 'Rfor';
break;
case 25:return 33;
break;
case 26:return 36;
break;
case 27:return 38;
break;
case 28:return 47;
break;
case 29:return 'Rcontinue';
break;
case 30:return 'Rreturn';
break;
case 31:return 'Rvoid'
break;
case 32:return 55
break;
case 33:return 54
break;
case 34:return 57
break;
case 35:return 59
break;
case 36:return 58
break;
case 37:return 56
break;
case 38:return 'incremento'
break;
case 39:return 'decremento'
break;
case 40:return 48;
break;
case 41:return 49;
break;
case 42:return 50;
break;
case 43:return 51;
break;
case 44:return 52;
break;
case 45:return 53;
break;
case 46:return 62;
break;
case 47:return 61
break;
case 48:return 60;
break;
case 49:return 17
break;
case 50:return 18
break;
case 51:return 43
break;
case 52:return 19
break;
case 53:return 37
break;
case 54:return 30
break;
case 55:return 31
break;
case 56:return 66;
break;
case 57:return 67;
break;
case 58:return 20;
break;
case 59:return 'opternario';
break;
case 60:return 'saltolinea';
break;
case 61:return 'barrainv';
break;
case 62:return 'comillasim';
break;
case 63:return 'comilladob';
break;
case 64:return 'tab';
break;
case 65:return 64;
break;
case 66:return 63;
break;
case 67:return 16
break;
case 68:return 5
break;
case 69:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:"((\\")|[^\n\"])*")/i,/^(?:'((\\')|[^\n\'])')/i,/^(?:print\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:exec\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:for\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:!)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:\()/i,/^(?:\))/i,/^(?:,)/i,/^(?:;)/i,/^(?::)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:=)/i,/^(?:\?)/i,/^(?:\\n)/i,/^(?:\\)/i,/^(?:\\')/i,/^(?:")/i,/^(?:\\t)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])([a-zA-Z0-9_])*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}