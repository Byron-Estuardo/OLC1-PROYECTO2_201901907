/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,20],$V2=[1,29],$V3=[1,30],$V4=[1,31],$V5=[1,32],$V6=[1,33],$V7=[1,19],$V8=[1,25],$V9=[1,22],$Va=[1,24],$Vb=[1,23],$Vc=[1,21],$Vd=[1,26],$Ve=[1,27],$Vf=[1,28],$Vg=[5,20,29,30,31,32,33,34,37,40,41,43,45,47,49,50,58,59,60],$Vh=[1,40],$Vi=[1,41],$Vj=[1,39],$Vk=[1,59],$Vl=[1,52],$Vm=[1,51],$Vn=[1,50],$Vo=[1,53],$Vp=[1,54],$Vq=[1,55],$Vr=[1,56],$Vs=[1,57],$Vt=[1,58],$Vu=[1,79],$Vv=[1,80],$Vw=[1,81],$Vx=[1,82],$Vy=[1,83],$Vz=[1,84],$VA=[1,85],$VB=[1,86],$VC=[1,87],$VD=[1,88],$VE=[1,89],$VF=[1,90],$VG=[1,91],$VH=[1,92],$VI=[22,36,46,52,62,63,64,65,66,67,68,69,70,71,72,73,74,75],$VJ=[5,20,29,30,31,32,33,34,35,37,40,41,43,45,47,49,50,58,59,60,63,76,77,78,79,80,81,82],$VK=[36,52],$VL=[22,36,46,52,62,63,64,65,66,67,68,69,70,71,72,73,75],$VM=[1,139],$VN=[1,144],$VO=[22,36,46,52,62,63,64,65,66,67],$VP=[22,36,46,52,64,65,66,67],$VQ=[22,36,46,52,62,63,64,65,66,67,68,69,70,71,72,73],$VR=[20,29,30,31,32,33,34,37,40,41,43,49],$VS=[1,163],$VT=[1,185],$VU=[40,45,47];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"OPCIONESCUERPO":4,"EOF":5,"CUERPO":6,"DEC_VAR":7,"IMPRIMIR":8,"DEC_MET":9,"AS_VAR":10,"EXEC":11,"RSIF":12,"WHILE":13,"SWITCHCASE":14,"INDEC":15,"INSFOR":16,"BREA":17,"RETU":18,"CONTINU":19,"identificador":20,"incremento":21,"ptcoma":22,"decremento":23,"INDEC1":24,"igual":25,"EXPRESION":26,"AS_VAR1":27,"TIPO":28,"Rentero":29,"Rdoble":30,"Rcadena":31,"Rcarater":32,"Rbooleano":33,"Rprint":34,"parA":35,"parC":36,"Rfor":37,"ACTU":38,"llaveA":39,"llaveC":40,"Rif":41,"Relse":42,"Rswitch":43,"LISTACASOS":44,"Rdefault":45,"dospts":46,"Rcase":47,"CASOS_EVALUAR":48,"Rwhile":49,"Rexec":50,"LISTAVALORES":51,"coma":52,"LLAMADA_METODO":53,"OPCIONESMETODO":54,"LISTAPARAMETROS":55,"PARAMETROS":56,"CUERPOMETODO":57,"Rbreak":58,"Rreturn":59,"Rcontinue":60,"FUNC":61,"mass":62,"menoss":63,"porr":64,"divv":65,"pott":66,"modd":67,"dif":68,"igualii":69,"menorr":70,"menorii":71,"mayorr":72,"mayorii":73,"orr":74,"andd":75,"nott":76,"enteroo":77,"decimall":78,"caracterr":79,"Rtrue":80,"Rfalse":81,"cadenaa":82,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",20:"identificador",21:"incremento",22:"ptcoma",23:"decremento",25:"igual",29:"Rentero",30:"Rdoble",31:"Rcadena",32:"Rcarater",33:"Rbooleano",34:"Rprint",35:"parA",36:"parC",37:"Rfor",39:"llaveA",40:"llaveC",41:"Rif",42:"Relse",43:"Rswitch",45:"Rdefault",46:"dospts",47:"Rcase",49:"Rwhile",50:"Rexec",52:"coma",58:"Rbreak",59:"Rreturn",60:"Rcontinue",62:"mass",63:"menoss",64:"porr",65:"divv",66:"pott",67:"modd",68:"dif",69:"igualii",70:"menorr",71:"menorii",72:"mayorr",73:"mayorii",74:"orr",75:"andd",76:"nott",77:"enteroo",78:"decimall",79:"caracterr",80:"Rtrue",81:"Rfalse",82:"cadenaa"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[15,3],[15,3],[24,2],[24,2],[10,4],[27,3],[7,3],[7,5],[28,1],[28,1],[28,1],[28,1],[28,1],[8,5],[16,10],[16,10],[38,1],[38,1],[12,7],[12,9],[12,11],[14,7],[14,10],[44,4],[44,3],[48,1],[48,2],[13,7],[11,5],[11,6],[51,3],[51,1],[53,4],[53,5],[9,6],[9,7],[55,3],[55,1],[56,2],[54,2],[54,1],[57,1],[57,1],[57,1],[57,1],[57,1],[57,1],[57,1],[57,1],[57,1],[17,2],[18,2],[18,3],[19,2],[61,7],[61,8],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,2],[26,2],[26,3],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 console.log(JSON.stringify($$[$0-1],null,2)); return $$[$0-1]; 
break;
case 2: case 57:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 58:
 this.$ = [$$[$0]]; 
break;
case 4: case 44:
 this.$ = $$[$0]; 
break;
case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 34: case 35: case 59: case 60: case 61: case 62: case 63: case 64: case 65: case 66: case 67:
 this.$ = $$[$0] 
break;
case 18:
 this.$ = INSTRUCCION.nuevoIncremento($$[$0-2], this._$.first_line,this._$.first_column+1); 
break;
case 19:
 this.$ = INSTRUCCION.nuevoDecremento($$[$0-2], this._$.first_line,this._$.first_column+1); 
break;
case 20:
 this.$ = INSTRUCCION.nuevoIncremento($$[$0-1], this._$.first_line,this._$.first_column+1); 
break;
case 21:
 this.$ = INSTRUCCION.nuevoDecremento($$[$0-1], this._$.first_line,this._$.first_column+1); 
break;
case 22:
 this.$ = INSTRUCCION.nuevaAsignacion($$[$0-3], $$[$0-1], this._$.first_line,this._$.first_column+1); 
break;
case 23:
 this.$ = INSTRUCCION.nuevaAsignacion($$[$0-2], $$[$0], this._$.first_line,this._$.first_column+1); 
break;
case 24:
 this.$ = INSTRUCCION.nuevaDeclaracion($$[$0-1], null, $$[$0-2], this._$.first_line,this._$.first_column+1); 
break;
case 25:
 this.$ = INSTRUCCION.nuevaDeclaracion($$[$0-3], $$[$0-1], $$[$0-4], this._$.first_line,this._$.first_column+1); 
break;
case 26:
 this.$ = TIPO_DATO.ENTERO 
break;
case 27:
 this.$ = TIPO_DATO.DECIMAL 
break;
case 28:
 this.$ = TIPO_DATO.CADENA 
break;
case 29:
 this.$ = TIPO_DATO.CARACTER 
break;
case 30:
 this.$ = TIPO_DATO.BANDERA 
break;
case 31:
 this.$ = new INSTRUCCION.nuevoPrint($$[$0-2], this._$.first_line,this._$.first_column+1); 
break;
case 32: case 33:
 this.$ = INSTRUCCION.nuevofor($$[$0-7], $$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1); 
break;
case 36:
 this.$ = new INSTRUCCION.nuevoIf($$[$0-4], $$[$0-1], null, this._$.first_line,this._$.first_column+1); 
break;
case 37:
 this.$ = new INSTRUCCION.nuevoIf($$[$0-6], $$[$0-3], Array($$[$0]), this._$.first_line,this._$.first_column+1); 
break;
case 38:
 this.$ = new INSTRUCCION.nuevoIf($$[$0-8], $$[$0-5], $$[$0-1], this._$.first_line,this._$.first_column+1); 
break;
case 39:
 this.$ = INSTRUCCION.nuevoSwitch($$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1);
break;
case 40:
 this.$ = INSTRUCCION.nuevoSwitch($$[$0-7], $$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1);
break;
case 41:
 this.$ = $$[$0-3]; this.$.push(INSTRUCCION.nuevoCaso($$[$0-1], $$[$0], this._$.first_line,this._$.first_column+1)); 
break;
case 42:
 this.$ = []; this.$.push(INSTRUCCION.nuevoCaso($$[$0-1], $$[$0], this._$.first_line,this._$.first_column+1)); 
break;
case 43:
 this.$ = []; 
break;
case 45:
 this.$ = new INSTRUCCION.nuevoWhile($$[$0-4], $$[$0-1] , this._$.first_line,this._$.first_column+1); 
break;
case 46:
 this.$ = INSTRUCCION.nuevoExec($$[$0-3], null, this._$.first_line,this._$.first_column+1); 
break;
case 47:
 this.$ = INSTRUCCION.nuevoExec($$[$0-4], $$[$0-2], this._$.first_line,this._$.first_column+1); 
break;
case 48:
$$[$0-2].push($$[$0]); this.$=$$[$0-2]
break;
case 49:
this.$=[$$[$0]]
break;
case 50:
 this.$ = INSTRUCCION.nuevaLlamada($$[$0-3], null, this._$.first_line,this._$.first_column+1); 
break;
case 51:
 this.$ = INSTRUCCION.nuevaLlamada($$[$0-4], $$[$0-2], this._$.first_line,this._$.first_column+1); 
break;
case 52:
this.$ = INSTRUCCION.nuevoMetodo($$[$0-5], null, $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 53:
this.$ = INSTRUCCION.nuevoMetodo($$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 54:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 55:
this.$=[$$[$0]];
break;
case 56:
this.$ = INSTRUCCION.nuevaDeclaracion($$[$0], null, $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 68:
 this.$ = INSTRUCCION.nuevoBreak(this._$.first_line,this._$.first_column+1); 
break;
case 69:
 this.$ = INSTRUCCION.nuevoReturn(null, this._$.first_line,this._$.first_column+1); 
break;
case 70:
 this.$ = INSTRUCCION.nuevoReturn($$[$0-1], this._$.first_line,this._$.first_column+1); 
break;
case 71:
 this.$ = INSTRUCCION.nuevoContinue(this._$.first_line,this._$.first_column+1); 
break;
case 72:
this.$ = INSTRUCCION.nuevaFuncion($$[$0-6], null, $$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 73:
this.$ = INSTRUCCION.nuevaFuncion($$[$0-7], $$[$0-5], $$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 74:
 this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.SUMA,this._$.first_line,this._$.first_column+1); 
break;
case 75:
 this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.RESTA,this._$.first_line,this._$.first_column+1); 
break;
case 76:
 this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MULTIPLICACION,this._$.first_line,this._$.first_column+1); 
break;
case 77:
 this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.DIVISION,this._$.first_line,this._$.first_column+1); 
break;
case 78:
 this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.POTENCIA,this._$.first_line,this._$.first_column+1); 
break;
case 79:
 this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MODULO,this._$.first_line,this._$.first_column+1); 
break;
case 80:
 this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.DIFERENTE,this._$.first_line,this._$.first_column+1); 
break;
case 81:
 this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.IGUALIGUAL,this._$.first_line,this._$.first_column+1); 
break;
case 82:
 this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MENOR,this._$.first_line,this._$.first_column+1); 
break;
case 83:
 this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MENORIGUAL,this._$.first_line,this._$.first_column+1); 
break;
case 84:
 this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MAYOR,this._$.first_line,this._$.first_column+1); 
break;
case 85:
 this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MAYORIGUAL,this._$.first_line,this._$.first_column+1); 
break;
case 86:
 this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.OR,this._$.first_line,this._$.first_column+1); 
break;
case 87:
 this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.AND,this._$.first_line,this._$.first_column+1); 
break;
case 88:
 this.$ = INSTRUCCION.nuevaOperacionUnaria($$[$0], TIPO_OPERACION.NOT,this._$.first_line,this._$.first_column+1); 
break;
case 89:
 this.$ = INSTRUCCION.nuevaOperacionUnaria($$[$0], TIPO_OPERACION.NEGATIVO, this._$.first_line,this._$.first_column+1); 
break;
case 90:
 this.$ = $$[$0-1] 
break;
case 91:
 this.$ = INSTRUCCION.nuevoValor(parseInt($$[$0]), TIPO_VALOR.ENTERO, this._$.first_line,this._$.first_column+1); 
break;
case 92:
 this.$ = INSTRUCCION.nuevoValor(parseFloat($$[$0]), TIPO_VALOR.DECIMAL, this._$.first_line,this._$.first_column+1); 
break;
case 93:
 this.$ = INSTRUCCION.nuevoValor($$[$0], TIPO_VALOR.CARACTER, this._$.first_line,this._$.first_column+1); 
break;
case 94: case 95:
 this.$ = INSTRUCCION.nuevoValor($$[$0], TIPO_VALOR.BANDERA, this._$.first_line,this._$.first_column+1); 
break;
case 96:
 this.$ = INSTRUCCION.nuevoValor($$[$0], TIPO_VALOR.CADENA, this._$.first_line,this._$.first_column+1); 
break;
case 97:
 this.$ = INSTRUCCION.nuevoValor($$[$0], TIPO_VALOR.IDENTIFICADOR, this._$.first_line,this._$.first_column+1); 
break;
}
},
table: [{3:1,4:2,5:$V0,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:$V1,28:18,29:$V2,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,37:$V8,41:$V9,43:$Va,49:$Vb,50:$Vc,58:$Vd,59:$Ve,60:$Vf},{1:[3]},{5:[1,34],6:35,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:$V1,28:18,29:$V2,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,37:$V8,41:$V9,43:$Va,49:$Vb,50:$Vc,58:$Vd,59:$Ve,60:$Vf},o($Vg,[2,3]),o($Vg,[2,4]),o($Vg,[2,5]),o($Vg,[2,6]),o($Vg,[2,7]),o($Vg,[2,8]),o($Vg,[2,9]),o($Vg,[2,10]),o($Vg,[2,11]),o($Vg,[2,12]),o($Vg,[2,13]),o($Vg,[2,14]),o($Vg,[2,15]),o($Vg,[2,16]),o($Vg,[2,17]),{20:[1,36]},{35:[1,37]},{21:$Vh,23:$Vi,25:$Vj,35:[1,38]},{20:[1,42]},{35:[1,43]},{35:[1,44]},{35:[1,45]},{35:[1,46]},{22:[1,47]},{20:$Vk,22:[1,48],26:49,35:$Vl,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{22:[1,60]},{20:[2,26]},{20:[2,27]},{20:[2,28]},{20:[2,29]},{20:[2,30]},{1:[2,1]},o($Vg,[2,2]),{22:[1,61],25:[1,62]},{20:$Vk,26:63,35:$Vl,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{28:67,29:$V2,30:$V3,31:$V4,32:$V5,33:$V6,36:[1,64],55:65,56:66},{20:$Vk,26:68,35:$Vl,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{22:[1,69]},{22:[1,70]},{35:[1,71]},{20:$Vk,26:72,35:$Vl,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{20:$Vk,26:73,35:$Vl,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{20:$Vk,26:74,35:$Vl,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{7:75,10:76,20:[1,77],28:18,29:$V2,30:$V3,31:$V4,32:$V5,33:$V6},o($Vg,[2,68]),o($Vg,[2,69]),{22:[1,78],62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH},{20:$Vk,26:93,35:$Vl,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{20:$Vk,26:94,35:$Vl,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{20:$Vk,26:95,35:$Vl,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},o($VI,[2,91]),o($VI,[2,92]),o($VI,[2,93]),o($VI,[2,94]),o($VI,[2,95]),o($VI,[2,96]),o($VI,[2,97]),o($Vg,[2,71]),o($VJ,[2,24]),{20:$Vk,26:96,35:$Vl,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{36:[1,97],62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH},{39:[1,98]},{36:[1,99],52:[1,100]},o($VK,[2,55]),{20:[1,101]},{22:[1,102],62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH},o($Vg,[2,18]),o($Vg,[2,19]),{20:$Vk,26:105,35:$Vl,36:[1,103],51:104,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{36:[1,106],62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH},{36:[1,107],62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH},{36:[1,108],62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH},{20:$Vk,26:109,35:$Vl,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{20:$Vk,26:110,35:$Vl,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{25:$Vj},o($Vg,[2,70]),{20:$Vk,26:111,35:$Vl,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{20:$Vk,26:112,35:$Vl,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{20:$Vk,26:113,35:$Vl,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{20:$Vk,26:114,35:$Vl,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{20:$Vk,26:115,35:$Vl,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{20:$Vk,26:116,35:$Vl,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{20:$Vk,26:117,35:$Vl,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{20:$Vk,26:118,35:$Vl,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{20:$Vk,26:119,35:$Vl,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{20:$Vk,26:120,35:$Vl,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{20:$Vk,26:121,35:$Vl,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{20:$Vk,26:122,35:$Vl,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{20:$Vk,26:123,35:$Vl,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{20:$Vk,26:124,35:$Vl,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},o($VL,[2,88],{74:$VG}),o([22,36,46,52],[2,89],{62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH}),{36:[1,125],62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH},{22:[1,126],62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH},{22:[1,127]},{7:130,8:131,10:132,12:133,13:134,14:135,15:136,16:137,20:$VM,28:18,29:$V2,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,37:$V8,41:$V9,43:$Va,49:$Vb,53:138,54:128,57:129},{39:[1,140]},{28:67,29:$V2,30:$V3,31:$V4,32:$V5,33:$V6,56:141},o($VK,[2,56]),o($VJ,[2,22]),{22:[1,142]},{36:[1,143],52:$VN},o($VK,[2,49],{62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH}),{39:[1,145]},{39:[1,146]},{39:[1,147]},{22:[1,148],62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH},{22:[1,149],62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH},o($VO,[2,74],{68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH}),o($VO,[2,75],{68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH}),o($VP,[2,76],{62:$Vu,63:$Vv,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH}),o($VP,[2,77],{62:$Vu,63:$Vv,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH}),o([22,36,46,52,66],[2,78],{62:$Vu,63:$Vv,64:$Vw,65:$Vx,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH}),o($VP,[2,79],{62:$Vu,63:$Vv,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH}),o($VQ,[2,80],{74:$VG,75:$VH}),o($VQ,[2,81],{74:$VG,75:$VH}),o($VQ,[2,82],{74:$VG,75:$VH}),o($VQ,[2,83],{74:$VG,75:$VH}),o($VQ,[2,84],{74:$VG,75:$VH}),o($VQ,[2,85],{74:$VG,75:$VH}),o($VI,[2,86]),o($VL,[2,87],{74:$VG}),o($VI,[2,90]),o($VJ,[2,25]),o($Vg,[2,31]),{7:130,8:131,10:132,12:133,13:134,14:135,15:136,16:137,20:$VM,28:18,29:$V2,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,37:$V8,40:[1,150],41:$V9,43:$Va,49:$Vb,53:138,57:151},o($VR,[2,58]),o($VR,[2,59]),o($VR,[2,60]),o($VR,[2,61]),o($VR,[2,62]),o($VR,[2,63]),o($VR,[2,64]),o($VR,[2,65]),o($VR,[2,66]),o($VR,[2,67]),{21:$Vh,23:$Vi,25:$Vj,35:[1,152]},{7:130,8:131,10:132,12:133,13:134,14:135,15:136,16:137,20:$VM,28:18,29:$V2,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,37:$V8,41:$V9,43:$Va,49:$Vb,53:138,54:153,57:129},o($VK,[2,54]),o($Vg,[2,46]),{22:[1,154]},{20:$Vk,26:155,35:$Vl,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{4:156,5:$V0,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:$V1,28:18,29:$V2,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,37:$V8,41:$V9,43:$Va,49:$Vb,50:$Vc,58:$Vd,59:$Ve,60:$Vf},{4:157,5:$V0,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:$V1,28:18,29:$V2,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,37:$V8,41:$V9,43:$Va,49:$Vb,50:$Vc,58:$Vd,59:$Ve,60:$Vf},{44:158,47:[1,159]},{20:$VS,24:161,27:162,38:160},{20:$VS,24:161,27:162,38:164},o($Vg,[2,52]),o($VR,[2,57]),{20:$Vk,26:105,35:$Vl,36:[1,165],51:166,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{7:130,8:131,10:132,12:133,13:134,14:135,15:136,16:137,20:$VM,28:18,29:$V2,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,37:$V8,40:[1,167],41:$V9,43:$Va,49:$Vb,53:138,57:151},o($Vg,[2,47]),o($VK,[2,48],{62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH}),{6:35,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:$V1,28:18,29:$V2,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,37:$V8,40:[1,168],41:$V9,43:$Va,49:$Vb,50:$Vc,58:$Vd,59:$Ve,60:$Vf},{6:35,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:$V1,28:18,29:$V2,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,37:$V8,40:[1,169],41:$V9,43:$Va,49:$Vb,50:$Vc,58:$Vd,59:$Ve,60:$Vf},{40:[1,170],45:[1,171],47:[1,172]},{20:$Vk,26:173,35:$Vl,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{36:[1,174]},{36:[2,34]},{36:[2,35]},{21:[1,175],23:[1,176],25:[1,177]},{36:[1,178]},{22:[1,179]},{36:[1,180],52:$VN},o($Vg,[2,53]),o($Vg,[2,36],{42:[1,181]}),o($Vg,[2,45]),o($Vg,[2,39]),{46:[1,182]},{20:$Vk,26:183,35:$Vl,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{46:$VT,48:184,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH},{39:[1,186]},{36:[2,20]},{36:[2,21]},{20:$Vk,26:187,35:$Vl,63:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr,81:$Vs,82:$Vt},{39:[1,188]},o($VR,[2,50]),{22:[1,189]},{12:190,39:[1,191],41:$V9},{4:192,5:$V0,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:$V1,28:18,29:$V2,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,37:$V8,41:$V9,43:$Va,49:$Vb,50:$Vc,58:$Vd,59:$Ve,60:$Vf},{46:$VT,48:193,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH},o($VU,[2,42]),o($VU,[2,43],{6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,28:18,4:194,5:$V0,20:$V1,29:$V2,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,37:$V8,41:$V9,43:$Va,49:$Vb,50:$Vc,58:$Vd,59:$Ve,60:$Vf}),{4:195,5:$V0,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:$V1,28:18,29:$V2,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,37:$V8,41:$V9,43:$Va,49:$Vb,50:$Vc,58:$Vd,59:$Ve,60:$Vf},{36:[2,23],62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH},{4:196,5:$V0,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:$V1,28:18,29:$V2,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,37:$V8,41:$V9,43:$Va,49:$Vb,50:$Vc,58:$Vd,59:$Ve,60:$Vf},o($VR,[2,51]),o($Vg,[2,37]),{4:197,5:$V0,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:$V1,28:18,29:$V2,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,37:$V8,41:$V9,43:$Va,49:$Vb,50:$Vc,58:$Vd,59:$Ve,60:$Vf},{6:35,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:$V1,28:18,29:$V2,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,37:$V8,40:[1,198],41:$V9,43:$Va,49:$Vb,50:$Vc,58:$Vd,59:$Ve,60:$Vf},o($VU,[2,41]),o($VU,[2,44],{7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,28:18,6:35,20:$V1,29:$V2,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,37:$V8,41:$V9,43:$Va,49:$Vb,50:$Vc,58:$Vd,59:$Ve,60:$Vf}),{6:35,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:$V1,28:18,29:$V2,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,37:$V8,40:[1,199],41:$V9,43:$Va,49:$Vb,50:$Vc,58:$Vd,59:$Ve,60:$Vf},{6:35,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:$V1,28:18,29:$V2,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,37:$V8,40:[1,200],41:$V9,43:$Va,49:$Vb,50:$Vc,58:$Vd,59:$Ve,60:$Vf},{6:35,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:$V1,28:18,29:$V2,30:$V3,31:$V4,32:$V5,33:$V6,34:$V7,37:$V8,40:[1,201],41:$V9,43:$Va,49:$Vb,50:$Vc,58:$Vd,59:$Ve,60:$Vf},o($Vg,[2,40]),o($Vg,[2,32]),o($Vg,[2,33]),o($Vg,[2,38])],
defaultActions: {29:[2,26],30:[2,27],31:[2,28],32:[2,29],33:[2,30],34:[2,1],161:[2,34],162:[2,35],175:[2,20],176:[2,21]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	const TIPO_OPERACION	= require('./Controladores/Tipos/TipoOperacion');
	const TIPO_VALOR 		  = require('./Controladores/Tipos/TipoValor');
	const TIPO_DATO			  = require('./Controladores/Tipos/TipoDato'); //para jalar el tipo de dato
	const INSTRUCCION	    = require('./Controladores/Instrucciones/Instruccion');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3: yy_.yytext = yy_.yytext.substr(0,yy_.yyleng); return 82; 
break;
case 4: yy_.yytext = yy_.yytext.substr(0,yy_.yyleng); return 79; 
break;
case 5:return 34;
break;
case 6:return 'lower';
break;
case 7:return 'upper';
break;
case 8:return 50;
break;
case 9:return 'Rlength';
break;
case 10:return 'Rtruncate';
break;
case 11:return 'Rround';
break;
case 12:return 'Rtypeof';
break;
case 13:return 'Rtostring';
break;
case 14:return 'Rchararray';
break;
case 15:return 29;
break;
case 16:return 30;
break;
case 17:return 33;
break;
case 18:return 32;
break;
case 19:return 31;
break;
case 20:return 49;
break;
case 21:return 'Rdo';
break;
case 22:return 41;
break;
case 23:return 42;
break;
case 24:return 37;
break;
case 25:return 43;
break;
case 26:return 47;
break;
case 27:return 45;
break;
case 28:return 58;
break;
case 29:return 60;
break;
case 30:return 59;
break;
case 31:return 'Rvoid';
break;
case 32:return 69;
break;
case 33:return 68;
break;
case 34:return 71;
break;
case 35:return 73;
break;
case 36:return 72;
break;
case 37:return 70;
break;
case 38:return 21;
break;
case 39:return 23;
break;
case 40:return 80;
break;
case 41:return 81;
break;
case 42:return 25;
break;
case 43:return 'opternario';
break;
case 44:return 62;
break;
case 45:return 63;
break;
case 46:return 64;
break;
case 47:return 65;
break;
case 48:return 66;
break;
case 49:return 67;
break;
case 50:return 76;
break;
case 51:return 75;
break;
case 52:return 74;
break;
case 53:return 35;
break;
case 54:return 36;
break;
case 55:return 52;
break;
case 56:return 22;
break;
case 57:return 46;
break;
case 58:return 39;
break;
case 59:return 40;
break;
case 60:return 'saltolinea';
break;
case 61:return 'barrainv';
break;
case 62:return 'comillasim';
break;
case 63:return 'comilladob';
break;
case 64:return 'tab';
break;
case 65:return 78;
break;
case 66:return 77;
break;
case 67:return 20;
break;
case 68:return 5
break;
case 69:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:"((\\")|[^\n\"])*")/i,/^(?:'((\\')|[^\n\'])')/i,/^(?:print\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:exec\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:for\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:=)/i,/^(?:\?)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:!)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:\()/i,/^(?:\))/i,/^(?:,)/i,/^(?:;)/i,/^(?::)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\\n)/i,/^(?:\\)/i,/^(?:\\')/i,/^(?:")/i,/^(?:\\t)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])([a-zA-Z0-9_])*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}